<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tian.mybatiescode.model.UserMapper" >

  <!--mybatis二级缓存是与mapper.xml文件绑定的
    默认二缓存效果:
    缓存本命名空间所有select语句.
    本命名空间所有insert, delete, update都会清空缓存
    回收策略为LRU(least recently use)最近最少使用回收
    根据时间间隔刷新缓存
    缓存被视为可读写的, 意味着对象检索不是共享的, 而且可以安全的被调用者修改,而不干扰其它调
    用者或者线程的潜在修改, 也就是线程安全的.
  -->
  <cache
    eviction="FIFO"
    flushInterval="60000"
    size="512"
    readOnly="false"
  />

  <!--parameterMap参数map对象

  -->
  <!--<parameterMap id="" type="">
    <parameter property="" mode="IN"/>
  </parameterMap>-->

  <resultMap id="BaseResultMap" type="com.tian.mybatiescode.model.User" >
    <id column="ID" property="id" jdbcType="BIGINT" />
    <result column="NICK_NAME" property="nickName" jdbcType="VARCHAR" />
    <result column="PASS_WORD" property="passWord" jdbcType="VARCHAR" />
    <result column="MAIL" property="mail" jdbcType="VARCHAR" />
    <result column="MOBILE" property="mobile" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="STATUS" property="status" jdbcType="INTEGER" />
    <result column="REMARK" property="remark" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="userTestMap" type="com.tian.mybatiescode.model.User" extends="BaseResultMap">
    <result column="test_id" property="test.id"/>
    <result column="test_test" property="test.test"/>
    <result column="test_userId" property="test.userId"/>
  </resultMap>

  <resultMap id="userTestMap2" type="com.tian.mybatiescode.model.User" extends="BaseResultMap">
    <association property="test" columnPrefix="test_" javaType="com.tian.mybatiescode.model.Test">
      <result column="ID" property="id"/>
      <result column="TEST" property="test"/>
      <result column="user_id" property="userId"/>
    </association>
  </resultMap>

  <resultMap id="userTestMap3" type="com.tian.mybatiescode.model.User" extends="BaseResultMap">
    <association property="test" columnPrefix="test_" resultMap="com.tian.mybatiescode.model.TestMapper.BaseResultMap"/>
  </resultMap>

  <resultMap id="userTestMap4" extends="BaseResultMap" type="com.tian.mybatiescode.model.User">
    <!--
    fetchType: 加载方式,默认为eager, 还可选lazy, lazy的意思是只有调和了getTest的时候才会执行子查询,防止用不到的数据还查数据,浪费资源
    column: 定义子查询时传参的固定写法{子查询参数名=本查询的字段名}
    -->
    <association fetchType="lazy" property="test" column="{id = test_id}" select="com.tian.mybatiescode.model.TestMapper.selectByPrimaryKey"/>
  </resultMap>


  <sql id="Base_Column_List" >
    ID, NICK_NAME, PASS_WORD, MAIL, MOBILE, CREATE_TIME, UPDATE_TIME, STATUS, REMARK
  </sql>
  <select id="selectByPrimaryKey" resultType="com.tian.mybatiescode.model.User" parameterType="java.lang.Long">
    select a.ID, a.NICK_NAME nickName, a.PASS_WORD passWord, a.MAIL, a.MOBILE, a.CREATE_TIME createTime,
        a.UPDATE_TIME updateTime, a.STATUS, a.REMARK, b.id "test.id", b.test "test.test"
    from user a
    left JOIN Test b on a.ID = b.ID
    where a.ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user
    where ID = #{id,jdbcType=BIGINT}
  </delete>

  <!--flushCache属性, 当调用该方法时, 会清除一级缓存和二级缓存, 默认为true
  parameterType参数类型, 可以指定, 也可以不指定, 由mybatis自动识别
  timeout 设置在拋出异常之前, 驱动程序等待数据库返回请求结果的秒数.
  statementType. 默认为PREPARED类型
  userGeneratedKeys: 默认false, 设为true, mybatis会调用getGeneratedKeys方法获取数据库自动生成的主键
  keyProperty: mybatis通过getGeneratedKeys方法获得的值要赋值给的属性名, 如果希望得到多个数据库自动生成的列,
      属性值可以是以逗号分开的属性名列表.
  databaseId: 如果配置了databaseIdProvider, mybatis会加载所有的不带databaseId的或者匹配当前databaseId的语句.
      如果两个都存在, 不带databaseId的会被忽略.
  -->
  <insert id="insert" parameterType="com.tian.mybatiescode.model.User" flushCache="true">
    insert into user (ID, NICK_NAME, PASS_WORD, 
      MAIL, MOBILE, CREATE_TIME, 
      UPDATE_TIME, STATUS, REMARK
      )
    values (#{id,jdbcType=BIGINT}, #{nickName,jdbcType=VARCHAR}, #{passWord,jdbcType=VARCHAR}, 
      #{mail,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}
      )
      /* selectKey标签也可以用来回写自增主键, 而且更通用(mysql和oracle都可以, 用时有细小差异) */
      <selectKey keyProperty="id" order="AFTER" resultType="long" >
        /* mysql就用这个获取最后一个自增值, oracle的话查序列的下一个值, 并且order属性的值改成BEFORE */
        select last_insert_id()
      </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.tian.mybatiescode.model.User"
          useGeneratedKeys="true" keyProperty="id" keyColumn="STATUS">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="nickName != null" >
        NICK_NAME,
      </if>
      <if test="passWord != null" >
        PASS_WORD,
      </if>
      <if test="mail != null" >
        MAIL,
      </if>
      <if test="mobile != null" >
        MOBILE,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="status != null" >
        STATUS,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="nickName != null" >
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="passWord != null" >
        #{passWord,jdbcType=VARCHAR},
      </if>
      <if test="mail != null" >
        #{mail,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tian.mybatiescode.model.User" >
    update user
    <set >
      <if test="nickName != null" >
        NICK_NAME = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="passWord != null" >
        PASS_WORD = #{passWord,jdbcType=VARCHAR},
      </if>
      <if test="mail != null" >
        MAIL = #{mail,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        MOBILE = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        STATUS = #{status,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        REMARK = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tian.mybatiescode.model.User" >
    update user
    set NICK_NAME = #{nickName,jdbcType=VARCHAR},
      PASS_WORD = #{passWord,jdbcType=VARCHAR},
      MAIL = #{mail,jdbcType=VARCHAR},
      MOBILE = #{mobile,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      STATUS = #{status,jdbcType=INTEGER},
      REMARK = #{remark,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=BIGINT,mode=IN}
  </update>

  <select id="queryByMailAndMobile" resultMap="BaseResultMap">
    select <include refid="Base_Column_List">
              <!--这里面的value值还可以定义${}这种动态形式的, 最终, 这个key会转换成配置信息对象中对应的值
              -->
              <property name="testMyValue" value="${myKey}"/>
            </include>
    from user where MAIL = #{mail,mode=IN} and MOBILE = #{mobile,mode=IN}
  </select>

  <select id="queryByIdWithTest" resultMap="userTestMap">
     select a.ID, a.NICK_NAME, a.PASS_WORD, a.MAIL, a.MOBILE, a.CREATE_TIME,
        a.UPDATE_TIME, a.STATUS, a.REMARK, b.id "test_id", b.test "test_test", b.user_id test_userId
    from user a
    left JOIN Test b on a.ID = b.user_id
    where a.ID = #{id,jdbcType=BIGINT}
  </select>

  <select id="queryByIdWithTest2" resultMap="userTestMap2">
    select a.ID, a.NICK_NAME, a.PASS_WORD, a.MAIL, a.MOBILE, a.CREATE_TIME,
    a.UPDATE_TIME, a.STATUS, a.REMARK, b.id "test_id", b.test "test_test", b.user_id test_userId
    from user a
    left JOIN Test b on a.ID = b.user_id
    where a.ID = #{id,jdbcType=BIGINT}
  </select>

  <select id="queryByIdWithTest3" resultMap="userTestMap3">
    select a.ID, a.NICK_NAME, a.PASS_WORD, a.MAIL, a.MOBILE, a.CREATE_TIME,
    a.UPDATE_TIME, a.STATUS, a.REMARK, b.id "test_id", b.test "test_test", b.user_id test_userId
    from user a
    left JOIN Test b on a.ID = b.user_id
    where a.ID = #{id,jdbcType=BIGINT}
  </select>

  <select id="queryByIdWithTest4" resultMap="userTestMap4">
    select a.ID, a.NICK_NAME, a.PASS_WORD, a.MAIL, a.MOBILE, a.CREATE_TIME,
    a.UPDATE_TIME, a.STATUS, a.REMARK, b.id "test_id"
    from user a
    left JOIN test b on a.ID = b.user_id
    where a.ID = #{id,jdbcType=BIGINT}
  </select>
</mapper>